import os
import shutil
from tqdm import tqdm
from pathlib import Path
from eval_mead import PERCENT

DATAPATH = '../../../data/test'
# MEAD_DIR = 'mead'
MEAD_DIR = os.path.abspath('mead')
MEAD_DATA_PATH = f'{MEAD_DIR}/data'
MEAD_BIN = f'{MEAD_DIR}/bin'
MEAD_LIB = f'{MEAD_DIR}/lib'
MEAD_FORMATTING_ADDONS = f'{MEAD_BIN}/addons/formatting'
MEAD_DID = f'{MEAD_DIR}/did'
TARGET = 'MEAD_TEST'


DATA_DIR = os.path.join(MEAD_DATA_PATH, TARGET)
parse = True
if os.path.exists(DATA_DIR):
    override = input('Data exist, override (delete and re-parse)? (Y/n): ')
    if override.lower() == 'y':
        shutil.rmtree(DATA_DIR)
    else:
        parse = False
os.makedirs(DATA_DIR, exist_ok=True)

cluster_file = os.path.join(DATA_DIR, 'MEAD_TEST.cluster')
config_file = os.path.join(DATA_DIR, 'MEAD_TEST.config')

CONFIG = f"""<?xml version='1.0' encoding='utf-8'?>
<MEAD-CONFIG LANG="ENG" TARGET="MEAD_TEST" CLUSTER-PATH="{DATA_DIR}" DOC-DIRECTORY="{DATA_DIR}/docsent">
<FEATURE-SET BASE-DIRECTORY="{DATA_DIR}/feature">
<FEATURE NAME="Position" SCRIPT="{MEAD_BIN}/feature-scripts/Position.pl" />
<FEATURE NAME="Length" SCRIPT="{MEAD_BIN}/feature-scripts/Length.pl" />
<FEATURE NAME="Centroid" SCRIPT="{MEAD_BIN}/feature-scripts/Centroid.pl enidf ENG" />
</FEATURE-SET>
<CLASSIFIER COMMAND-LINE="{MEAD_BIN}/default-classifier.pl Length 3 Centroid 4 Position 0" SYSTEM="MEADORIG" />
<COMPRESSION BASIS="sentences" PERCENT="1" />
</MEAD-CONFIG>
"""

if parse:

    ### Get raw text ###

    with open(os.path.join(DATAPATH, 'test.txt.src'), 'r') as stream:
        raw_papers = stream.readlines()

    papers = [paper.strip().split('##SENT##') for paper in raw_papers]

    # Setting Env. Var.

    with open(os.path.join(MEAD_FORMATTING_ADDONS, 'MEAD_ADDONS_UTIL.pm'), 'r') as stream:
        print('Make sure you have change the following line to absolute path to',
              os.path.abspath(MEAD_DID))
        print('line 18 of', os.path.join(
            MEAD_FORMATTING_ADDONS, 'MEAD_ADDONS_UTIL.pm'))
        print(stream.readlines()[17])
    with open(os.path.join(MEAD_LIB, 'MEAD', 'MEAD.pm'), 'r') as stream:
        print('Make sure you have change the following line to absolute path to',
              os.path.abspath(MEAD_DIR))
        print('line 31 of', os.path.join(MEAD_LIB, 'MEAD', 'MEAD.pm'))
        print(stream.readlines()[30])

    print('export PERL5LIB=' + os.path.abspath(MEAD_FORMATTING_ADDONS))
    os.system('export PERL5LIB=' + os.path.abspath(MEAD_FORMATTING_ADDONS))
    os.environ['PERL5LIB'] = os.path.abspath(MEAD_FORMATTING_ADDONS)

    # Write raw text, cluster file

    # This stuff should be generated by text2cluster.pl
    # cluster_lines = []
    # cluster_lines.append("<?xml version = '1.0' encoding='utf-8'?>\n")
    # cluster_lines.append("<CLUSTER LANG='ENG'>\n")

    print('Converting src to raw text...')
    for i, paper in tqdm(enumerate(papers), total=len(papers)):

        # did = f'raw_text_{i+1}.txt'
        did = f'{i+1}'
        text_file = os.path.join(DATA_DIR, did)
        with open(text_file, 'w') as stream:
            # make sure the sent split are the same as our annotation
            stream.write('\n'.join(paper))

    # delete </ pattern or XML might break
    # os.system(f'find {DATA_DIR} -type f | xargs sed -i "s/<\///g"')
    # https://stackoverflow.com/questions/8914435/awk-sed-how-to-remove-parentheses-in-simple-text-file
    # os.system(f'find {DATA_DIR} -type f | xargs sed -i "s/[><]//g"')

    # https://validator.w3.org/feed/docs/error/SAXError.html
    # https://www.w3.org/TR/REC-xml/#dt-chardata
    print('Clean up stuff that might influence XML parsing...')
    os.system(f'find {DATA_DIR} -type f | xargs sed -i "s/</&lt;/g"')
    os.system(f'find {DATA_DIR} -type f | xargs sed -i "s/&/&amp;/g"')
    os.system(f'find {DATA_DIR} -type f | xargs sed -i "s/>/&gt;/g"')

    # cluster_lines.append(f"\t<D DID='{did}' />\n")
    # cluster_lines.append('</CLUSTER>\n')

    # Get docsent

    # with open(cluster_file, 'w') as stream:
    #     stream.writelines(cluster_lines)

    # Path(cluster_file).touch()

    print('Create cluster and docsent files...')
    os.system(
        f'perl {MEAD_FORMATTING_ADDONS}/text2cluster.pl {DATA_DIR}')

    if os.system(f'mv {DATA_DIR}/../{TARGET}.cluster {DATA_DIR}') != 0:
        print(
            'MAKE SURE you have change $dir/$dir.cluster to $dir.cluster in {MEAD_FORMATTING_ADDONS}/text2cluster.pl')
        print("Currently, it has bug and can't create file")

    # Run config

    # with open(config_file, 'w') as stream:
    #     stream.write(CONFIG)

    # extract_file = os.path.join(DATA_DIR, f'{TARGET}.extract')
    # os.system(
    #     f'cat {config_file} | {MEAD_BIN}/driver.pl > {extract_file}')

    # https://askubuntu.com/questions/20414/find-and-replace-text-within-a-file-using-commands
    os.system(
        f'find {DATA_DIR} -name "*.cluster" | xargs sed -i "s/<?xml version=\'1.0\'?>/<?xml version=\'1.0\' encoding=\'utf-8\'?>/g"')
    os.system(
        f'find {DATA_DIR} -name "*.docsent" | xargs sed -i "s/<?xml version=\'1.0\'?>/<?xml version=\'1.0\' encoding=\'utf-8\'?>/g"')


OUTPUT_PATH = '../output'
OUTPUT_DIR = os.path.join(OUTPUT_PATH, 'mead')
if os.path.exists(OUTPUT_DIR):
    override = input('Result exist, do you want to re-run? (Y/n): ')
    if override.lower() == 'y':
        shutil.rmtree(OUTPUT_DIR)
os.makedirs(OUTPUT_DIR, exist_ok=True)

summary_file = os.path.join(OUTPUT_DIR, f'{TARGET}.summary')
extract_file = os.path.join(OUTPUT_DIR, f'{TARGET}.extract')
# compression basis is "sentence", and give PERCENT% summary
shared_parameters = f'-sentences -percent {PERCENT}'

# os.system(
#     f'perl {MEAD_BIN}/mead.pl {shared_parameters} -summary -output {summary_file} {TARGET}')
os.system(
    f'perl {MEAD_BIN}/mead.pl {shared_parameters} -extract -output {extract_file} {TARGET}')
